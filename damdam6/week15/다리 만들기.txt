package y24Mar;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class Baek2146 {

    public static void main(String[] args) throws Exception {

        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(bf.readLine());

        int[][] arr = new int[N][N];

        StringTokenizer st;
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(bf.readLine());
            for (int j = 0; j < N; j++) {
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        ArrayDeque<pos> qu = new ArrayDeque<>();

        int[][] vt = new int[N][N];

        int num = 1;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (arr[i][j] == 0) continue;
                if (vt[i][j] != 0) continue;
                qu.add(new pos(i, j));
                vt[i][j] = num;
                while (!qu.isEmpty()) {
                    pos temp = qu.poll();


                    for (int k = 0; k < 4; k++) {
                        int nx = temp.x + dx[k];
                        int ny = temp.y + dy[k];

                        if (nx < 0 | ny < 0 | nx >= N | ny >= N) {
                            continue;
                        }
                        if (vt[nx][ny] != 0) continue;
                        if (arr[nx][ny] == 0) continue;

                        vt[nx][ny] = num;
                        qu.add(new pos(nx, ny));
                    }

                }
                num++;

            }

        }

//        for (int i = 0; i < N; i++) {
//            System.out.println(Arrays.toString(vt[i]));
//        }

        // 전부 바꿔줬음..
        dis = Integer.MAX_VALUE;
        ArrayDeque<pos> qq = new ArrayDeque<>();
        for (int i = 0; i < N; i++) {

            for (int j = 0; j < N; j++) {

                // 섬이면
                if (vt[i][j] == 0) continue;
//                // arr을 vt 배열로 쓰기
//                if (arr[i][j] != 0 && arr[i][j] != 1) continue;

                num = vt[i][j];
                qq.add(new pos(i, j));

                while (!qq.isEmpty()) {
                    pos p = qq.poll();
                    if (p.dis >= dis) continue;

                    for (int k = 0; k < 4; k++) {
                        int nx = p.x + dx[k];
                        int ny = p.y + dy[k];

                        if (nx < 0 | ny < 0 | nx >= N | ny >= N) {
                            continue;
                        }
                        if (vt[nx][ny] == num) continue;

                        if (vt[nx][ny] != 0 && vt[nx][ny] != num) {
                            dis = Math.min(p.dis + 1, dis);
                            continue;
                        }

                        vt[nx][ny] = num;
                        qu.add(new pos(nx, ny, p.dis + 1));
                    }

                }


            }

        }
        System.out.println(dis);
    }

    static int dis;
    static int[] dx = new int[]{0, 0, -1, 1};
    static int[] dy = new int[]{1, -1, 0, 0};

    public static class pos {
        int x;
        int y;
        int dis;

        public pos(int x, int y) {
            this.x = x;
            this.y = y;
            dis = 0;
        }

        public pos(int x, int y, int dis) {
            this.x = x;
            this.y = y;
            this.dis = dis;
        }

        @Override
        public String toString() {
            return "pos{" +
                    "x=" + x +
                    ", y=" + y +
                    ", dis=" + dis +
                    '}';
        }
    }
}
