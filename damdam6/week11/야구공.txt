
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    static int[][] score;

    public static void main(String[] args) throws Exception {


        //총 9명 - 1~9번
        // 1번 타자는 4번으로 침


        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;


        N = Integer.parseInt(bf.readLine());
        score = new int[N][9];
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(bf.readLine());
            for (int j = 0; j < 9; j++) {
                score[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        vt = new boolean[9];
        order = new int[9];
        order[3] = 1;
        vt[3] = true;
        dfs(0);

        System.out.println(maxScore);

    }

    static boolean[] vt;
    static int[] order;

    static int N;

    static void dfs(int num) {
        if (num == 9) {
            gamePlay(N);
            return;
        }
        if (num == 4) {
            dfs(num + 1);
            return;
        }

        for (int i = 0; i < 9; i++) {
            if (!vt[i]) {
                vt[i] = true;
                order[num] = i;
                dfs(num + 1);
                vt[i] = false;
            }
        }

    }

    //        안타: 타자와 모든 주자가 한 루씩 진루한다.
//        2루타: 타자와 모든 주자가 두 루씩 진루한다.
//        3루타: 타자와 모든 주자가 세 루씩 진루한다.
//        홈런: 타자와 모든 주자가 홈까지 진루한다.
//        아웃: 모든 주자는 진루하지 못하고, 공격 팀에 아웃이 하나 증가한다.


    static int maxScore = 0;

    static void gamePlay(int N) {
        int scoreNum = 0;
        int idx = 0;


        for (int i = 0; i < N; i++) {
            int outNum = 0;
            int[] base = new int[4];

            while (outNum < 3) {

                base[0] = 1;
                switch (score[i][order[idx]]) {
                    case 0:
                        outNum++;
                        break;
                    case 1:
                        for (int j = 3; j >= 0; j--) {
                            if (base[j] == 1) {

                                if (j + 1 >= 4) {
                                    scoreNum++;

                                } else {
                                    base[j + 1] = 1;
                                    base[j] = 0;
                                }

                            }

                        }

                        break;
                    case 2:
                        for (int j = 3; j >= 0; j--) {
                            if (base[j] == 1) {

                                if (j + 2 >= 4) {
                                    scoreNum++;
                                } else {
                                    base[j + 2] = 1;
                                    base[j] = 0;
                                }

                            }

                        }
                        break;
                    case 3:
                        for (int j = 3; j >= 0; j--) {
                            if (base[j] == 1) {

                                if (j + 3 >= 4) {
                                    scoreNum++;

                                } else {
                                    base[j + 3] = 1;
                                    base[j] = 0;
                                }

                            }

                        }
                        break;
                    case 4:
                        for (int j = 3; j >= 0; j--) {
                            if (base[j] == 1) {
                                scoreNum++;
                            }

                        }
                }

                idx = (idx + 1) % 9;
            }

            maxScore = Math.max(maxScore, scoreNum);
            scoreNum = 0;
            base = new int[4];

        }

    }

}



